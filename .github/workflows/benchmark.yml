name: Benchmark Pull Request
on:
  pull_request:
  repository_dispatch:
    types: [ reporters-db-pr ]


env:
  main: "$(/usr/bin/git log -1 --format='%H')"

jobs:
  benchmark:
    name: PR comment
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v2
      - uses: snok/install-poetry@v1
        with:
          version: 1.2.0rc1
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Setup variables I
        id: branch1
        run: |
          echo ${{ github.event.issue.pull_request }}
          echo "::set-output name=filepath::benchmark/${{ env.main }}.json"
          echo "::set-output name=hash::${{ env.main }}"

      - name: Curl and Install
        run: |
          curl https://storage.courtlistener.com/bulk-data/eyecite/tests/one-percent.csv.bz2 --output benchmark/bulk-file.csv.bz2
          poetry install --with benchmark --without dev --without x86

      - name: Run first benchmark
        run: |
          poetry run python benchmark/benchmark.py --branches ${{ steps.branch1.outputs.hash }}
          git stash --include-untracked

      - uses: actions/checkout@v3
        with:
          repository: flooie/pingme
          ref: main

      - name: Setup variables II
        id: branch2
        run: |
          echo "::set-output name=filepath::benchmark/${{ env.main }}.json"
          echo "::set-output name=hash::${{ env.main }}"

      - name: Run second benchmark
        run: |
          poetry install --with benchmark --without dev --without x86
          git stash pop
          poetry run python benchmark/benchmark.py --branches ${{ steps.branch1.outputs.hash }} ${{ steps.branch2.outputs.hash }} --pr ${{ github.event.number }}

      - name: Upload and Post Files to PR
        uses: gavv/pull-request-artifacts@v1.0.0
        with:
          repo-token: ${{ secrets.TOKEN }}
          commit: ${{ github.event.pull_request.head.sha }}
          repo: pingme
          artifacts-branch: artifacts
          artifacts-dir: benchmark
          artifacts: |
            benchmark/report.md
            benchmark/chart.png
            benchmark/output.csv
            ${{ steps.branch1.outputs.filepath }}
            ${{ steps.branch2.outputs.filepath }}

      - name: Add or Update PR Comment from Generated Report
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          recreate: true
          path: benchmark/report.md

#  dispatch:
#    name: Reporters-DB-Dipatch
#    if: github.event_name == 'repository_dispatch'
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v3
#      - uses: actions/setup-python@v2
#      - uses: snok/install-poetry@v1
#        with:
#          version: 1.2.0rc1
#          virtualenvs-create: true
#          virtualenvs-in-project: true
#
#      - name: Load cached venv
#        id: cached-poetry-dependencies
#        uses: actions/cache@v2
#        with:
#          path: .venv
#          key: venv-${{ hashFiles('**/poetry.lock') }}
#
#      #----------------------------------------------
#      # install dependencies if cache does not exist
#      #----------------------------------------------
#      - name: Install dependencies
#        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
#        run: poetry install --with benchmark --without dev --without x86
#
#      - name: Setup variables I
#        id: branch1
#        run: |
#          echo ${{ github.event.client_payload.pr_number }}
#          curl https://storage.courtlistener.com/bulk-data/eyecite/tests/one-percent.csv.bz2 --output benchmark/bulk-file.csv.bz2
#          poetry run python benchmark/benchmark.py --branches original
#          poetry run pip install "git+https://github.com/freelawproject/reporters-db.git@${{ github.event.client_payload.commit }}"
#          poetry run python benchmark/benchmark.py --branches original update --reporters --pr ${{ github.event.client_payload.pr_number }}
#
#      - name: Add or Update PR Comment from Generated Report
#        uses: marocchino/sticky-pull-request-comment@v2
#        with:
#          recreate: true
#          GITHUB_TOKEN: ${{ secrets.TOKEN }}
#          path: benchmark/report.md
#          number: ${{ github.event.client_payload.pr_number }}
#          repo: crosspingme


  test:
    runs-on: ubuntu-latest
    steps:
      #----------------------------------------------
      #       check-out repo and set-up python
      #----------------------------------------------
      - name: Check out repository
        uses: actions/checkout@v2
      - name: Set up python
        id: setup-python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      #----------------------------------------------
      #  -----  install & configure poetry  -----
      #----------------------------------------------
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
          version: 1.2.0rc2

      #----------------------------------------------
      #       load cached venv if cache exists
      #----------------------------------------------
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v2
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      #----------------------------------------------
      # install dependencies if cache does not exist
      #----------------------------------------------
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --with benchmark --without dev --without x86
      #----------------------------------------------
      #              run test suite
      #----------------------------------------------
      - name: Run tests
        run: |
          echo "TESTS RUN"